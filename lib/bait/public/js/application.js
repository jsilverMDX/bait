{:mime_type=>"application/javascript", :body=>"\n\n/** bait.coffee **/\n\n(function() {\n  window.Bait = {\n    subscribe: function(handlers) {\n      var source;\n      source = new EventSource('/events');\n      return source.addEventListener(\"message\", function(e) {\n        var data, handler;\n        data = JSON.parse(e.data);\n        handler = handlers[data[0]][data[1]];\n        return handler.apply(this, data.slice(2));\n      });\n    }\n  };\n\n}).call(this);\n\n\n/** build.coffee **/\n\n(function() {\n  window.Build = {\n    find: function(id) {\n      return $(\"#\" + id);\n    },\n    all: function(cb) {\n      return $.getJSON('/build', function(data) {\n        return cb(data);\n      });\n    },\n    DOM: {\n      UIHelper: {\n        expand_toggle: function(el) {\n          return el.on(\"click\", function(e) {\n            if (el.css(\"max-height\") === \"100px\") {\n              return el.css(\"max-height\", \"100%\");\n            } else {\n              return el.css(\"max-height\", \"100px\");\n            }\n          });\n        },\n        enable_links: function(element) {\n          element.find('a.remove').click(function() {\n            $.ajax({\n              type: \"DELETE\",\n              url: $(this).data('url')\n            });\n            return false;\n          });\n          return element.find('a.retest').click(function() {\n            $(this).parents('.build').find('pre').html(\"\");\n            $.post($(this).data('url'));\n            return false;\n          });\n        }\n      },\n      init: function(build_id) {\n        var build, output, pre;\n        build = Build.find(build_id);\n        pre = build.find(\".output pre\");\n        output = pre.html();\n        if ((output != null) && output.size > 0) {\n          pre.html(ansi2html(output));\n        }\n        Build.DOM.UIHelper.expand_toggle(pre);\n        return Build.DOM.UIHelper.enable_links(build);\n      }\n    },\n    List: {\n      add: function(build) {\n        var html;\n        html = Build.to_html(build);\n        if ($('.build').length > 0) {\n          $('.build').first().before(html);\n        } else {\n          $('ul#builds').append(html);\n        }\n        return Build.DOM.init(build.id);\n      }\n    },\n    to_html: function(build) {\n      return \"<li id=\\\"\" + build.id + \"\\\" class=\\\"build\\\">\\n  <div class=\\\"header \" + build.status + \"\\\">\\n    <div class=\\\"status\\\">\" + build.status + \"</div>\\n    <a href=\\\"\" + build.clone_url + \"\\\">\" + build.name + \"</a>\\n    <div class=\\\"ref\\\">\" + (build.ref != null ? build.ref : build.ref = '') + \"</div>\\n  </div>\\n  <div class=\\\"output\\\">\\n    <pre>\" + build.output + \"</pre>\\n  </div>\\n  <div class=\\\"actions\\\">\\n    <a href=\\\"#\\\" class=\\\"remove\\\" data-url=\\\"/build/\" + build.id + \"\\\">Remove</a>\\n    |\\n    <a href=\\\"#\\\" class=\\\"retest\\\" data-url=\\\"/build/\" + build.id + \"/retest\\\">Retest</a>\\n  </div>\\n</li>\";\n    }\n  };\n\n}).call(this);\n\n\n/** main.coffee **/\n\n(function() {\n  Zepto(function($) {\n    ManualClone.init();\n    Build.all(function(builds) {\n      $.each(builds, function(i, d) {\n        return Build.List.add(d.build);\n      });\n      return $(\"#loading\").remove();\n    });\n    return Bait.subscribe({\n      global: {\n        new_build: function(data) {\n          return Build.List.add(data.build);\n        }\n      },\n      build: {\n        output: function(id, text) {\n          var pre;\n          pre = Build.find(id).find('pre');\n          return pre.append(ansi2html(text));\n        },\n        status: function(id, text) {\n          var header;\n          header = Build.find(id).find(\".header\");\n          header.find(\".status\").html(text);\n          return header.attr(\"class\", \"header \" + text);\n        },\n        remove: function(id) {\n          return Build.find(id).remove();\n        }\n      }\n    });\n  });\n\n}).call(this);\n\n\n/** manual_clone.coffee **/\n\n(function() {\n  window.ManualClone = {\n    init: function() {\n      var button, field, form, manual_clone;\n      form = $('.manual_clone');\n      field = form.find('input');\n      button = form.find('button');\n      manual_clone = function() {\n        var input;\n        input = field.val();\n        if (input.length > 0) {\n          if (!button.attr('disabled')) {\n            button.attr('disabled', 'disabled');\n            return $.post('/build/create', {\n              clone_url: input\n            }, function(response) {\n              console.log(response);\n              return button.removeAttr('disabled');\n            });\n          }\n        } else {\n          return alert(\"Enter a local path or remote url to a git repo, e.g.:\\n        Local: /Users/your/project\\n        Remote: https://github.com/your/project\");\n        }\n      };\n      field.keypress(function(e) {\n        if (e.keyCode === 13) {\n          return manual_clone();\n        }\n      });\n      return button.on('click', function() {\n        return manual_clone();\n      });\n    }\n  };\n\n}).call(this);\n"}
